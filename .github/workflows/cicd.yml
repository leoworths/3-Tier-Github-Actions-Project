name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
permissions:
  contents: read
  security-events: write

jobs:
  compile-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      - name: Frontend Syntax Check
        run: |
          cd client
          find . -name "*.js" -exec node --check {} +
      - name: Frontend Install Dependencies
        run: |
          cd client
          npm ci
  compile-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json
      - name: Backend Syntax Check
        run: |
          cd api
          find . -name "*.js" -exec node --check {} +
      - name: Backend Install Dependencies
        run: |
          cd api
          npm ci 
#check for security vulnerabilities
  gitleaks-scan:
    runs-on: ubuntu-latest
    needs: [compile-frontend, compile-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Gitleak Setup 
        uses: gitleaks/gitleaks-action@v2
      - name: Gitleak Security Check  
        run: |
          gitleaks detect --source ./api --report-path-backend=gitleaks-api-report.json || true
          gitleaks detect --source ./client --report-path-frontend=gitleaks-client-report.json || true
      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-reports
          path: |
            gitleaks-api-report.json
            gitleaks-client-report.json
#check for security vulnerabilities with trivy
  trivy-scan:
    runs-on: ubuntu-latest
    needs: gitleaks-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Trivy Setup
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'
          vuln-type: 'os,library'
      - name: Trivy Report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#sonarqube scan
  sonarqube-scan-frontend:
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Frontend Scan 
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./client
          args: >
            -Dsonar.projectKey=NodeJS-frontend
            -Dsonar.projectName=NodeJS-frontend
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
      - name: SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        uses: SonarSource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600  # Adjust the timeout as needed
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
      - name: Show Quality Gate Result
        run: echo ${{ steps.sonarqube-quality-gate-check.outputs.status }}
#sonarqube scan for backend
  sonarqube-scan-backend:
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Backend Scan 
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./api
          args: >
            -Dsonar.projectKey=NodeJS-backend
            -Dsonar.projectName=NodeJS-backend
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
      - name: SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        uses: SonarSource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600  # Adjust the timeout as needed
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
      - name: Show Quality Gate Result
        run: echo ${{ steps.sonarqube-quality-gate-check.outputs.status }}
#Build Artifacts
  build-artifacts:
    runs-on: ubuntu-latest
    needs: [sonarqube-scan-frontend, sonarqube-scan-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Use Node.js 23
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            api/package-lock.json
      - name: Build Frontend Artifacts
        run: |
          cd client
          npm ci
          npm run build
      - name: Upload Frontend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifacts
          path: client/dist
      - name: Build Backend Artifacts
        run: |
          cd api
          npm ci
          npm run build
      - name: Upload Backend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifacts
          path: api/dist
#build docker images and push to dockerhub
  docker-build-frontend:
    runs-on: ubuntu-latest
    needs: build-artifacts
    env:
      IMAGE_TAG: ${{ github.sha }}
      IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/${{github.event.repository.name }}-frontend
    outputs:
      image_name: ${{ env.IMAGE_NAME }}
      image_tag: ${{ steps.build.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download Frontend Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifacts
          path: client/dist 
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          file: ./client/Dockerfile
      - name: Set outputs
        id: build
        run: |
          echo "image_name=${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "image_tag=$(echo ${{ steps.meta.outputs.tags }} | head -n 1)" >> $GITHUB_OUTPUT
#build backend docker image and push to dockerhub
  docker-build-backend:
    runs-on: ubuntu-latest
    needs: build-artifacts
    env:
      IMAGE_TAG: ${{ github.sha }}
      IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/${{github.event.repository.name }}-backend
    outputs:
      image_name: ${{ env.IMAGE_NAME }}
      image_tag: ${{ steps.build.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download Backend Artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-artifacts
          path: api/dist 
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          file: ./api/Dockerfile
      - name: Set outputs
        id: build
        run: |
          echo "image_name=${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "image_tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
#Trivy scan frontend docker image
  trivy-scan-frontend:
    runs-on: ubuntu-latest
    needs: docker-build-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download Frontend Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifacts
          path: client/dist 
      - name: Trivy Scan Frontend Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.docker-build-frontend.outputs.image_name }}:${{ needs.docker-build-frontend.outputs.image_tag }}
          scan-type: 'image'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
      - name: Upload Trivy Frontend Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-frontend-image-report
          path: trivy-results.sarif
#Trivy scan backend docker image
  trivy-scan-backend:
    runs-on: ubuntu-latest
    needs: docker-build-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download Backend Artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-artifacts
          path: api/dist
      - name: Trivy Scan Backend Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.docker-build-backend.outputs.image_name }}:${{ needs.docker-build-backend.outputs.image_tag }}
          scan-type: 'image'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
      - name: Upload Trivy Backend Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-backend-image-report
          path: trivy-results.sarif
#Update k8s manifests 
  update-k8s-manifests:
    runs-on: ubuntu-latest
    needs: [trivy-scan-frontend, trivy-scan-backend]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Update Frontend Image in K8s Manifest
        run: |
          sed -i "s|image: .*|image: ${{ needs.docker-build-frontend.outputs.image_name }}:${{ needs.docker-build-frontend.outputs.image_tag }}|g" k8s-prod/frontend.yaml
      - name: Update Backend Image in K8s Manifest
        run: |
          sed -i "s|image: .*|image: ${{ needs.docker-build-backend.outputs.image_name }}:${{ needs.docker-build-backend.outputs.image_tag }}|g" k8s-prod/backend.yaml
      - name: Commit and Push Changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'actions@github.com'
          git add k8s-prod/frontend.yaml k8s-prod/backend.yaml
          git commit -m "Update frontend and backend images"
          git push origin main